#------------------------------------------------------------------------------
#
# NAME:
#       make.macros
#
# PURPOSE:
#       Unix make utility include file for definition of various make flags
#
# LANGUAGE:
#       Unix make
#
# CALLING SEQUENCE:
#       include make.macros
#
# CREATION HISTORY:
#       Written by:     Paul van Delst, CIMSS/SSEC 08-Jun-2000
#                       paul.vandelst@ssec.wisc.edu
#
#  Copyright (C) 2000 Paul van Delst
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#------------------------------------------------------------------------------

#################################################################################
#                                                                               #
#                        GENERAL USE MACRO SPECIFICATION                        #
#                                                                               #
#################################################################################

# --------------------
# Define default shell
# --------------------

SHELL = /bin/sh


# -------------------------------------
# Define link, copy and delete commands
# -------------------------------------

LINK = ln -sf
COPY = cp -v 
REMOVE = rm -f


# -------------------------
# Define tarballer commands
# -------------------------

TARBALLER = tar
TARBALL_CREATE = $(TARBALLER) cvhLf
TARBALL_APPEND = $(TARBALLER) rvhLf


# -------------------------
# Define archiver and flags
# -------------------------

ARCHIVER = ar
ARCHIVER_FLAGS = crvs
ARCHIVE_NAME =


# -------------------------------
# Include and library definitions
# -------------------------------

INCLUDES = 
LIBRARIES =  

# Note that for precompiled module files (e.g. netcdf.mod 
# from the NetCDF library) different compilers use different 
# switches for including Fortran 90 .mod files
#   SunOS:              -Mdir
#   AIX:                -Idir
#   IRIX64:             -Idir
#   Linux, PGI Fortran: -module dir
# 
# **NOTE**: Some compilers/platforms WRITE compiled .mod
#           files to the directory defined by the specific
#           module include syntax. This can be a major pain
#           in the bum.
#
# So if you're working on a Sun or a Linux/PGI platform, you may
# need to add the extra switch (-M or -module) to include precompiled
# Fortran 90 module files (e.g. .M, .m, .mod, or .MOD files).



#################################################################################
#                                                                               #
#                      SPECIFIC PLATFORM FLAG SPECIFICATION                     #
#                                                                               #
#################################################################################

#--------------------------------------------------------------------------------
# Sun FORTRAN 90 2.0 WorkShop Compilers 5.0
#
# -c           : Compile only, do not make executable file.
#                Compile and produce a .o file for each source file but
#                  suppress linking by the loader.  You can name a single
#                  object file explicitly using the -o option.
# -C           : Check array references for out of range subscripts.
#                Subscripting arrays beyond their declared sizes may
#                  result in unexpected results, including segmentation
#                  faults. The -C option checks for possible array sub-
#                  script violations in the source code and during execu-
#                  tion.
#                If the -C option is used, array subscript violations
#                  are treated as an error. If an array subscript range
#                  violation is detected in the source code during compi-
#                  lation, it is treated as a compilation error.
#                This option will increase the size of the executable
#                  file and degrade execution performance.  It should only
#                  be used while debugging.
# -fsimple=0   : Select floating-point optimization preferences
#                An argument of 0 permits no simplifying assumptions. It
#                  preserves strict IEEE 754 conformance.
#
# -ftrap=overflow,division,invalid
#              : This option sets the IEEE floating-point trapping that
#                  is in effect at startup. The f90 default is -ftrap=common
#                  which includes all the above except underflow - hence the
#                  explicit list.
#                    overflow  - Detect and trap on floating-point overflow.
#                    underflow - Detect and trap on floating-point underflow.
#                    division  - Detect and trap on floating-point division by zero.
#                    invalid   - Detect and trap on floating-point invalid operations.
#                To be effective this option must be used when compiling
#                  the main program.
# -g           : Compile for debugging. Produce additional symbol table
#                   information for dbx or the Sun WorkShop debugging utility.
#                Does not override optimisation.
#--------------------------------------------------------------------------------

SUNOS_COMMON_FLAGS = 
SUNOS_FLAGS = "FC=f90" \
	      "FL=f90" \
	      "FC_FLAGS= -c \
                         -C \
                         -fsimple=0 \
                         -ftrap=overflow,division,invalid \
                         -g \
                         ${INCLUDES} \
                         ${SUNOS_COMMON_FLAGS}" \
	      "FL_FLAGS= ${SUNOS_COMMON_FLAGS} \
                         ${LIBRARIES} \
                         -o" \
              "FPP_FLAGS= -DBIG_ENDIAN"


#-----------------------------------------------------------------------------------------
# IBM AIX xlf90 compiler
#
# -c                        : Compile only; do not call the linkage editor.
# -qcheck                   : Performs run-time checking of array bounds and character
#                               substring expressions.
# -qdbg                     : Produces debug information.
# -qextchk                  : Performs procedure interface checking as well as
#                               detection of mismatched common blocks.
# -qfloat=nomaf:rndsngl     : Specifies floating-point suboptions.
#                               nomaf   - Suppresses generation of multiply-add
#                                         instructions.
#                               rndsngl - Ensures strict adherence to IEEE
#                                         standard.  That is, all operations on
#                                         single-precision values produce results
#                                         that remain in single precision.
# -qflttrap=ov:zero:inv     : Determines what types of floating-point exception
#                               conditions to detect at run time.  The program receives
#                               a SIGTRAP signal when the corresponding exception occurs,
#                               provided exception-checking is enabled.
#                               ov   - Detect and trap on floating-point overflow.
#                               und  - Detect and trap on floating-point underflow.
#                               zero - Detect and trap on floating-point division by zero.
#                               inv  - Detect and trap on floating-point invalid operations.
# -qfree=f90                : Code is in Fortran 90 free format
# -qhalt=W                  : Stops compiler after first phase if severity of errors
#                             detected equals or exceeds W (warning).
# -qlanglvl=90pure          : Determines which language standard (or superset or
#                               subset of a standard) to check against for nonconformance.
#                               90pure - Accepts the language specified by the
#                                        ISO F90 standard and reports errors for 
#                                        any obsolescent Fortran 90 features used.
# -qsuffix=f=f90:cpp=F90    : Specifies the source file suffix for the compiler is "f90"
#                               and that for the preprocessor (cpp) is "F90".
#-----------------------------------------------------------------------------------------

AIX_COMMON_FLAGS = 
AIX_FLAGS = "FC=xlf90" \
	    "FL=xlf90" \
	    "FC_FLAGS= -c \
                       -qcheck \
                       -qdbg \
                       -qextchk \
                       -qfloat=nomaf:rndsngl \
                       -qflttrap=ov:zero:inv \
                       -qfree=f90 \
                       -qhalt=W \
                       -qlanglvl=90pure \
                       -qsuffix=f=f90:cpp=F90 \
                       ${INCLUDES} \
                       ${AIX_COMMON_FLAGS}" \
	    "FL_FLAGS= ${AIX_COMMON_FLAGS} \
                       ${LIBRARIES} \
                       -o" \
            "FPP_FLAGS= -WF,-DBIG_ENDIAN"


#--------------------------------------------------------------------------------
# SGI IRIX64 MIPSpro f90 compiler
#
# -ansi        : Causes the compiler to generate messages when it encounters
#                  source code that does not conform to the Fortran 90
#                  standard.  Specifying this option in conjunction with the
#                  -fullwarn option causes all messages, regardless of level,
#                  to be generated.
# -n32         : Generates 32-bit objects.  When in effect, the total memory
#                  allocation for a program and individual arrays cannot exceed
#                  2 Gbytes. The -n32 options can affect the Instruction Set
#                  Architecture (ISA) used during compilation.  For more
#                  information on this interaction, see the -mipsn option.
#                  This flag is used in linking also.
# -c           : Just compile. Suppress link stage
# -C           : Performs runtime subscript range checking.  Subscripts that
#                  are out of range cause fatal run time errors.
# -g           : Generates debugging information and establishes a debugging
#                  level. No debug_lvl argument is equivalent to -g2 and means
#                  that information for symbolic debugging is produced and
#                  optimization is disabled. (No optimisation is the default
# -fullwarn    : Requests that the compiler generate comment-level messages.
#                  These messages are suppressed by default.  Specifying this
#                  option can be useful during software development.
# -bytereclen  : Specify that record lengths for unformatted files be in
#                  units of 8-bit bytes rather than 4-byte words.
# -u           : Makes the default type of a variable undefined, rather than
#                  using default Fortran 90 rules.
#--------------------------------------------------------------------------------

#IRIX64_COMMON_FLAGS = -64
#IRIX64_FLAGS = "FC=f90" \
#               "FL=f90" \
#               "FC_FLAGS= -ansi \
#                          -c \
#                          -C \
#                          -g \
#                          -fullwarn \
#                          -bytereclen \
#                          -u \
#                          ${INCLUDES} \
#                          ${IRIX64_COMMON_FLAGS}" \
#               "FL_FLAGS= ${IRIX64_COMMON_FLAGS} \
#                          ${LIBRARIES} \
#                          -o" \
#               "FPP_FLAGS= -DBIG_ENDIAN" \
#               "TARBALL_CREATE=$(TARBALLER) cvLf" \
#               "TARBALL_APPEND=$(TARBALLER) rvLf"

# -OPT:Olimit=n
#             Specifies that any routine bigger than n should not be
#             optimized.  If -O2 or greater is in effect and a routine is so
#             big that the compile speed may be slow, the compiler generates
#             a message indicating the Olimit value that is needed to
#             optimize.  You can recompile with that value of n, or you can
#             recompile with -OPT:Olimit=0 and avoid having any Olimit
#             cutoff.

IRIX64_COMMON_FLAGS = -C -g -64
#IRIX64_COMMON_FLAGS = -O2 -64
IRIX64_FLAGS = "FC=f90" \
               "FL=f90" \
               "FC_FLAGS= \
                          -c \
                          -bytereclen \
                          -OPT:Olimit=0 \
                          ${INCLUDES} \
                          ${IRIX64_COMMON_FLAGS}" \
               "FL_FLAGS= ${IRIX64_COMMON_FLAGS} \
                          ${LIBRARIES} \
                          -o" \
               "FPP_FLAGS= -DBIG_ENDIAN" \
               "TARBALL_CREATE=$(TARBALLER) cvLf" \
               "TARBALL_APPEND=$(TARBALLER) rvLf"



#------------------------------------------------------------------------------------------
# PORTLAND GROUP F90 COMPILER FOR LINUX
#
# -c                       : Just compile. Suppress link stage
# -g                       : Generate  symbolic  debug  information. Also sets the
#                            optimisation level to 0.
# -Kieee                   : Perform float and double divides in conformance with
#                            the IEEE 754 standard. This is done by replacing
#                            the usual in-line divide algorithm with a subroutine
#                            call, at the expense of performance. The default algorithm
#                            produces results that differ from the correctly rounded
#                            result by no more than 3 units in the last place. Also,
#                            on some systems, a more accurate math library may be
#                            linked if -Kieee is used during the link step.
# -Ktrap=ovf,divz,inv      : Determines what types of floating-point exception
#                            conditions to detect at run time.  The program
#                            terminates with a SIGFPE signal when the
#                            corresponding exception occurs.
#                              ovf  - Detect and trap on floating-point overflow.
#                              unf  - Detect and trap on floating-point underflow.
#                              divz - Detect and trap on floating-point division by zero.
#                              inv  - Detect and trap on floating-point invalid operations.
#                            NOTE: Removed "unf" from the list as it was producing
#                                  floating point exception in third party software
#                                  (mostly in Lapack code.)
# -Mbounds                 : Enable array bound checking.
# -Mchkstk:                : Instructs the compiler to check the stack for available space
#                            in the prologue of a function. Prints a warning message and
#                            aborts the program gracefully if stack space is insufficient.
# -Mdclchk                 : Require that all variables be declared
# -Minform,inform          : Instructs the compiler to display all error  messages
#                            (inform, warn, severe and fatal)
# -Mref_externals          : Force references to names appearing in EXTERNAL
#                            statements.
# -O0                      : Set the optimisation level to 0. A basic block is
#                            generated for each Fortran statement. No scheduling
#                            is done between statements. No global optimizations
#                            are performed.
#------------------------------------------------------------------------------------------

# add option, byteswapio, to swap bytes for unformatted data files in order to be 
# compatible with other systems.  - Yong Han, 12/11/2002			

Linux_COMMON_FLAGS_PGI =
#Linux_FLAGS_PGI = "FC=pgf90" \
#	          "FL=pgf90" \
#	          "FC_FLAGS= -c \
#                             -g \
#                             -byteswapio \
#                             -Kieee \
#                             -Ktrap=ovf,divz,inv \
#                             -Mbounds \
#                             -Mchkstk \
#                             -Mdclchk \
#                             -Minform,inform \
#                             -Mref_externals \
#                             ${INCLUDES} \
#                             ${Linux_COMMON_FLAGS_PGI}" \
#	          "FL_FLAGS= ${Linux_COMMON_FLAGS_PGI} \
#	                     ${LIBRARIES} \
#                             -o" \
#                  "FPP_FLAGS= "

Linux_FLAGS_PGI = "FC=pgf90" \
	          "FL=pgf90" \
	          "FC_FLAGS= -c \
                            -byteswapio \
                             -Kieee \
                             -Ktrap=ovf,inv \
                             -Mbounds \
                             -Mchkstk \
                             -Mdclchk \
                             -Minform,inform \
                             -Mref_externals \
                             ${INCLUDES} \
                             ${Linux_COMMON_FLAGS_PGI}" \
	          "FL_FLAGS= ${Linux_COMMON_FLAGS_PGI} \
	                     ${LIBRARIES} \
                             -o" \
                  "FPP_FLAGS= "

#------------------------------------------------------
# ABSOFT F90 COMPILER FOR LINUX
#
# -c   : Just compile. Suppress link stage
# -B80 : Generate code to write the name of the currently
#        executing procedure to standard out.
# -en  : Issue a warning whenever extensions to the
#        Fortran 90 standard are encountered
# -g   : Generate debug info (Dwarf debug info on Linux)
# -m0  : Don't suppress any errors, warnings, cautions, 
#        notes, or comments output by the compiler
#------------------------------------------------------

Linux_COMMON_FLAGS_Absoft = 
Linux_FLAGS_Absoft = "FC=f90" \
                     "FL=f90" \
                     "FC_FLAGS= -c \
                                -B80 \
                                -en \
                                -g \
                                -m0 \
                                ${INCLUDES} \
                                ${Linux_COMMON_FLAGS_Absoft}" \
                     "FL_FLAGS= ${Linux_COMMON_FLAGS_Absoft} \
                                ${LIBRARIES} \
                                -o" \
                     "FPP_FLAGS= "


# ------------------------------
# Define the default Linux flags
# ------------------------------

Linux_FLAGS = $(Linux_FLAGS_PGI)



#-------------------------------------------------------------------------------
#                          -- MODIFICATION HISTORY --
#-------------------------------------------------------------------------------
#
# $Id: make.macros,v 1.8 2002/04/08 17:32:40 paulv Exp $
#
# $Date: 2002/04/08 17:32:40 $
#
# $Revision: 1.8 $
#
# $Name:  $
#
# $State: Exp $
#
# $Log: make.macros,v $
# Revision 1.8  2002/04/08 17:32:40  paulv
# - Added macro definitions and rules for preprocessing .F90 files.
#
# Revision 1.7  2001/11/08 15:16:28  paulv
# - Replaced all the removed INVALID floating point exception specifiers.
# - Added the -ansi and -DEBUG:[option...] compiler options to the SGI list.
#
# Revision 1.6  2001/11/07 21:17:58  paulv
# - Removed invalid and underflow floating point exception flags from all
#   compiler flag macros. The underflow was for the same reason as described
#   in the previous log message. The invalid flag removal was to prevent
#   floating point exceptions occurring when using byte-swapping software.
#   Byte-swapping some "regular" numbers makes them appear invalid and thus
#   cause a core dump if the invalid flag is set.
#
# Revision 1.5  2001/09/27 19:51:10  paulv
# - Added header documentation.
# - Added some more comments regarding the "including" of precompiled
#   .mod files via the INCLUDES macro.
# - Removed the underflow trap from the -Ktrap options for the PGI compiler.
#   Including this check caused floating point exception errors in third
#   party software (LAPACK).
# - Added a generic Linux_FLAGS macros definition so if the linux compiler
#   changes the makefile itself doesn't need to be changed.
# - Added RCS keyword list.
#
# Revision 1.4 2001/09/13 14:55:48  paulv
# - Removed definitions for generic includes and libraries. Also removed
#   MOD_INCLUDES definition to prevent mod files being written to another
#   directory (in some compilers)
# - Added ENDIAN flag definition to the compiler/platform definitions.
# - Added floating point exception flags to the PGI compiler options.
# - Removed -qundef compiler option from AIX list. Using this option always
#   produced warnings on AIX systems that the compiler may reject standard
#   compliant code.
#
# Revision 1.3  2001/05/09 21:10:03  paulv
# - Added some new definitions and documentation.
#
# Revision 1.2  2000/07/26 20:48:31  paulv
# - Separated the common flags definitions from the platform definitions. It
#   appears you can't define and use macros in the same definitions statement.
# - Added LINK macro
#
# Revision 1.1  2000/06/08 19:30:24  paulv
# Initial checked in version
#
#
